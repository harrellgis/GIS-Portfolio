//THIS IS A SASS TUTORIAL FROM:
//https://www.youtube.com/watch?v=_a5j7KoflTs
//30:00min

//NESTING**********
/*
You can nest a child div in a parent div using CSS syntax
i.e html tag or class . notation. However, you can replace
the parent element name with & in dot notation. For example:

.main
    .main_paragraph

becomes:
.main
    &_paragraph
*/

/*
This compiles as just the element (i.e .main_paragraph) but if we want
to compile with the parent element (i.e .main .main_paragraph) we need to 
wrap #{&}
*/

//PARTIALS**************
/*
A partial is a sass file starting with _ that contains css
and which sass does not generate a css file for. This allows
you to compile snippets of css such as variables, colors, etc without
sass creating a separate css file for each 
*/

//FUNCTIONS************
/*
Instead of mapping a variable, we can create functions which css will 
automatically compile whatever the function returns. Functions return
values
*/

//MIX-INS**************
/*
Mix-ins are similar to functions in that you can set several styles such as 
for flex-boxes. You can use these for things such as changing from light
to dark themes, or for media queries. Mix-ins store styles
*/

@import "./resets";
@import "./variables";

@function weight($weight-name) {
  @return map-get($font-weights, $weight-name);
}

@mixin flexCenter($direction) {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: $direction;
}

@mixin theme($light-theme: true) {
  @if $light-theme {
    background: lighten($main, 100%);
    color: darken($links, 100%);
  }
}

@mixin mobile {
  @media (max-width: $mobile) {
    @content;
  }
}

body {
  background: $main;
  color: $links;
}

.main {
  @include flexCenter(row);
  width: 80%;
  margin: 0 auto;

  #{&}_paragraph {
    font-weight: weight(regular);
    padding: 1rem;

    &:hover {
      color: pink;
    }
  }

  @include mobile {
    //Write media query here
    flex-direction: column;
  }
}

.light {
  @include theme($light-theme: false);
}
